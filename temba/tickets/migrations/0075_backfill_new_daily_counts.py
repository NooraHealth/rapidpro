# Generated by Django 5.1.4 on 2025-04-21 14:53

from django.db import migrations, transaction
from django.db.models import Q, Sum

# tickets.TicketDailyCount                -> orgs.DailyCount
#
# count_type=O scope=o:<orgid>            -> org=orgid scope=tickets:opened
# count_type=A scope=o:<orgid>:u:<userid> -> org=orgid scope=tickets:assigned:<teamid>:<userid>
# count_type=R scope=o:<orgid>:u:<userid> -> org=orgid scope=msgs:ticketreplies:<teamid>:<userid>


def backfill_new_daily_counts(apps, schema_editor):  # pragma: no cover
    Org = apps.get_model("orgs", "Org")
    DailyCount = apps.get_model("orgs", "DailyCount")

    for org in Org.objects.filter(is_active=True).exclude(tickets=None).order_by("id"):
        # get current team ids for all users in the org
        OrgMembership = apps.get_model("orgs", "OrgMembership")
        memberships = OrgMembership.objects.filter(org=org).values("team_id", "user_id")
        user_teams = {m["user_id"]: m["team_id"] for m in memberships}

        new_counts = convert_old_counts(apps, org, user_teams)

        with transaction.atomic():
            org.daily_counts.filter(
                Q(scope="tickets:opened")
                | Q(scope__startswith="tickets:assigned:")
                | Q(scope__startswith="msgs:ticketreplies:")
            ).delete()

            DailyCount.objects.bulk_create(new_counts)

        print(f"Created {len(new_counts)} new daily counts for org '{org.name}'")


def convert_old_counts(apps, org, user_teams: dict) -> list:  # pragma: no cover
    TicketDailyCount = apps.get_model("tickets", "TicketDailyCount")
    DailyCount = apps.get_model("orgs", "DailyCount")

    counts = []

    opened_per_day = (
        TicketDailyCount.objects.filter(count_type="O", scope=f"o:{org.id}").values("day").annotate(total=Sum("count"))
    )
    for tdc in opened_per_day:
        counts.append(DailyCount(org=org, day=tdc["day"], scope="tickets:opened", count=tdc["total"], is_squashed=True))

    assigned_per_day = (
        TicketDailyCount.objects.filter(count_type="A", scope__startswith=f"o:{org.id}:u:")
        .values("scope", "day")
        .annotate(total=Sum("count"))
    )
    for tdc in assigned_per_day:
        user_id = tdc["scope"].split(":")[3]
        team_id = user_teams.get(int(user_id)) or 0
        counts.append(
            DailyCount(
                org=org,
                day=tdc["day"],
                scope=f"tickets:assigned:{team_id}:{user_id}",
                count=tdc["total"],
                is_squashed=True,
            )
        )

    replies_per_day = (
        TicketDailyCount.objects.filter(count_type="R", scope__startswith=f"o:{org.id}:u:")
        .values("scope", "day")
        .annotate(total=Sum("count"))
    )
    for tdc in replies_per_day:
        user_id = tdc["scope"].split(":")[3]
        team_id = user_teams.get(int(user_id)) or 0
        counts.append(
            DailyCount(
                org=org,
                day=tdc["day"],
                scope=f"msgs:ticketreplies:{team_id}:{user_id}",
                count=tdc["total"],
                is_squashed=True,
            )
        )

    return counts


class Migration(migrations.Migration):

    dependencies = [
        ("tickets", "0074_squashed"),
    ]

    operations = [
        migrations.RunPython(backfill_new_daily_counts, migrations.RunPython.noop),
    ]
