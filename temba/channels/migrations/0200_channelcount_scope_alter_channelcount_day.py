# Generated by Django 5.2.1 on 2025-06-03 20:59

import django.contrib.postgres.indexes
from django.db import migrations, models

SQL = """
DROP FUNCTION temba_insert_channelcount(INTEGER, VARCHAR(2), DATE, INT);

----------------------------------------------------------------------
-- Determines the channel count scope for a message
----------------------------------------------------------------------
CREATE OR REPLACE FUNCTION temba_msg_channel_countscope(_msg msgs_msg) RETURNS TEXT STABLE AS $$
BEGIN
  IF _msg.direction = 'I' THEN
    IF _msg.msg_type = 'V' THEN RETURN 'voice:in'; ELSE RETURN 'text:in'; END IF;
  ELSE
    IF _msg.msg_type = 'V' THEN RETURN 'voice:out'; ELSE RETURN 'text:out'; END IF;
  END IF;
  RETURN NULL;
END;
$$ LANGUAGE plpgsql;

----------------------------------------------------------------------
-- Handles INSERT statements on msg table
----------------------------------------------------------------------
CREATE OR REPLACE FUNCTION temba_msg_on_insert() RETURNS TRIGGER AS $$
BEGIN
    -- add broadcast counts for all new broadcast values
    INSERT INTO msgs_broadcastmsgcount("broadcast_id", "count", "is_squashed")
    SELECT broadcast_id, count(*), FALSE FROM newtab WHERE broadcast_id IS NOT NULL GROUP BY broadcast_id;

    -- add positive item counts for all rows which belong to a folder
    INSERT INTO orgs_itemcount("org_id", "scope", "count", "is_squashed")
    SELECT org_id, temba_msg_countscope(newtab), count(*), FALSE FROM newtab
    WHERE temba_msg_countscope(newtab) IS NOT NULL
    GROUP BY 1, 2;

    -- add channel counts for all messages with a channel
    INSERT INTO channels_channelcount("channel_id", "count_type", "scope", "day", "count", "is_squashed")
    SELECT channel_id, temba_msg_determine_channel_count_code(newtab), temba_msg_channel_countscope(newtab), created_on::date, count(*), FALSE FROM newtab
    WHERE channel_id IS NOT NULL GROUP BY channel_id, temba_msg_determine_channel_count_code(newtab), temba_msg_channel_countscope(newtab), created_on::date;

    RETURN NULL;
END;
$$ LANGUAGE plpgsql;
"""


class Migration(migrations.Migration):

    dependencies = [
        ("channels", "0199_cleanup_counts"),
    ]

    operations = [
        migrations.AddField(
            model_name="channelcount",
            name="scope",
            field=models.CharField(max_length=128, null=True),
        ),
        migrations.AlterField(
            model_name="channelcount",
            name="day",
            field=models.DateField(),
        ),
        migrations.AddIndex(
            model_name="channelcount",
            index=models.Index(
                models.F("channel"),
                models.F("day"),
                django.contrib.postgres.indexes.OpClass("scope", name="varchar_pattern_ops"),
                name="channelcount_channel_scope",
            ),
        ),
        migrations.AddIndex(
            model_name="channelcount",
            index=models.Index(
                condition=models.Q(("is_squashed", False)),
                fields=["channel", "day", "scope"],
                name="channelcount_unsquashed",
            ),
        ),
        migrations.RunSQL(SQL),
    ]
