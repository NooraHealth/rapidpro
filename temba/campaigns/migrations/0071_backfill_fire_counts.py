# Generated by Django 5.1.4 on 2025-03-05 20:35

from django.db import migrations, transaction


def backfill_fire_counts(apps, schema_editor):  # pragma: no cover
    CampaignEvent = apps.get_model("campaigns", "CampaignEvent")
    ContactFire = apps.get_model("contacts", "ContactFire")
    ItemCount = apps.get_model("orgs", "ItemCount")

    num_updated = 0
    for event in CampaignEvent.objects.filter(is_active=True).select_related("campaign"):
        org_id = event.campaign.org_id

        with transaction.atomic():
            count = ContactFire.objects.filter(fire_type="C", scope=f"{event.id}:{event.fire_version}").count()

            ItemCount.objects.filter(org_id=org_id, scope__startswith=f"campfires:{event.id}:").delete()
            ItemCount.objects.create(
                org_id=org_id, scope=f"campfires:{event.id}:{event.fire_version}", count=count, is_squashed=True
            )
            num_updated += 1

            if num_updated % 100 == 0:  # pragma: no cover
                print(f"Created fire counts for {num_updated} campaign events")


def apply_manual():  # pragma: no cover
    from django.apps import apps

    backfill_fire_counts(apps, None)


class Migration(migrations.Migration):

    dependencies = [
        ("campaigns", "0070_track_fire_counts"),
    ]

    operations = [
        migrations.RunPython(backfill_fire_counts, migrations.RunPython.noop),
    ]
