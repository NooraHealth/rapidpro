# Generated by Django 5.1.4 on 2025-02-03 19:24

from uuid import uuid4

from django.db import migrations
from django.db.models import Q


def backfill_fires(apps, schema_editor):
    ContactFire = apps.get_model("contacts", "ContactFire")
    FlowSession = apps.get_model("flows", "FlowSession")

    num_fires_created, num_sessions_updated = 0, 0

    while True:
        batch = list(
            FlowSession.objects.filter(status="W").filter(
                Q(timeout_on__isnull=False) | Q(wait_expires_on__isnull=False)
            )[:100]
        )
        if not batch:
            break

        fires = []

        for session in batch:
            if not session.last_sprint_uuid:
                session.last_sprint_uuid = uuid4()

            if session.wait_expires_on:
                fire = ContactFire(
                    org_id=session.org_id,
                    contact_id=session.contact_id,
                    fire_type="E",
                    scope="",
                    fire_on=session.wait_expires_on,
                    session_uuid=session.uuid,
                    sprint_uuid=session.last_sprint_uuid,
                    extra={"session_id": session.id, "session_modified_on": session.modified_on.isoformat()},
                )
                if session.call_id:
                    fire.extra["call_id"] = session.call_id

                fires.append(fire)
                session.wait_expires_on = None

            if session.timeout_on:
                fires.append(
                    ContactFire(
                        org_id=session.org_id,
                        contact_id=session.contact_id,
                        fire_type="T",
                        scope="",
                        fire_on=session.timeout_on,
                        session_uuid=session.uuid,
                        sprint_uuid=session.last_sprint_uuid,
                        extra={"session_id": session.id, "session_modified_on": session.modified_on.isoformat()},
                    )
                )
                session.timeout_on = None

            session.save(update_fields=("last_sprint_uuid", "wait_expires_on", "timeout_on"))

        num_fires_created += len(fires)
        try:
            ContactFire.objects.bulk_create(fires)
        except Exception:  # pragma: no cover
            for fire in fires:
                try:
                    fire.save()
                except Exception:
                    print(f"Failed to save fire contact={fire.contact_id} type={fire.fire_type}")

        num_sessions_updated += len(batch)
        print(f"Updated {num_sessions_updated} sessions, created {num_fires_created} fires")


def apply_manual():  # pragma: no cover
    from django.apps import apps

    backfill_fires(apps, None)


class Migration(migrations.Migration):

    dependencies = [
        ("flows", "0364_flowsession_last_sprint_uuid"),
    ]

    operations = [migrations.RunPython(backfill_fires, migrations.RunPython.noop)]
