# Generated by Django 5.1.4 on 2025-02-19 22:50

from django.db import migrations, transaction


def backfill_run_session_uuid(apps, schema_editor):
    FlowSession = apps.get_model("flows", "FlowSession")
    FlowRun = apps.get_model("flows", "FlowRun")

    num_updated = 0
    while True:
        batch = list(FlowRun.objects.exclude(session_id=None).filter(session_uuid=None).only("id", "session_id")[:1000])
        if not batch:
            break

        session_ids = {run.session_id for run in batch}
        session_uuids = {s.id: s.uuid for s in FlowSession.objects.filter(id__in=session_ids).only("id", "uuid")}

        with transaction.atomic():
            for run in batch:
                run.session_uuid = session_uuids.get(run.session_id)
                run.save(update_fields=("session_uuid",))

        num_updated += len(batch)
        print(f"Updated {num_updated} runs")


class Migration(migrations.Migration):

    dependencies = [
        ("flows", "0373_fix_expires_after"),
    ]

    operations = [
        migrations.RunPython(backfill_run_session_uuid, migrations.RunPython.noop),
    ]
